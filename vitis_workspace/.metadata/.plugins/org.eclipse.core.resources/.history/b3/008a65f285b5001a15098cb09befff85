
//System drivers
#include "xuartps.h"
#include "xparameters.h"

//Header file for this driver
#include "uart.h"


//UART device we're targeting for initialization
#define UART_DEVICE_ID XPAR_XUARTPS_0_DEVICE_ID
XUartPs Uart_PS;		/* Instance of the UART Device */


//returns 0 on success
uint8_t uart_init()
{
	int Status;
	XUartPs_Config *Config;


	/*
	 * Initialize the UART driver so that it's ready to use.
	 * Look up the configuration in the config table, then initialize it.
	 */
	Config = XUartPs_LookupConfig(UART_DEVICE_ID);
	if (NULL == Config) {
		return XST_FAILURE;
	}

	Status = XUartPs_CfgInitialize(&Uart_PS, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/* Check hardware build. */
	Status = XUartPs_SelfTest(&Uart_PS);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}

//Returns 0 on success
uint8_t uart_send_byte(uint8_t data_byte)
{
	//Wait until we're done sending
	while (XUartPs_IsSending(&Uart_PS));

	//Send one byte
	if(XUartPs_Send(&Uart_PS, &data_byte, 1) != 1)
	{
		return XST_FAILURE;
	}
	return XST_SUCCESS;
}

//Returns number of bytes written into buffer
uint32_t uart_get_bytes(uint32_t num_bytes, uint8_t * buff)
{
	uint32_t bytes_got = 0;

	while (bytes_got < num_bytes) {
		bytes_got +=
			XUartPs_Recv(&Uart_PS, buff + bytes_got,
				      (num_bytes - bytes_got));
	}

	return bytes_got;
}
